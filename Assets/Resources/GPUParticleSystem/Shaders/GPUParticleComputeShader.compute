CGPROGRAM

// Update kernel
#pragma kernel UPDATE

struct Constants
{
    float drag;
    float3 force;
};

uniform StructuredBuffer<Constants> gConstantsBuffer;

StructuredBuffer<float4> gPositionIN;
StructuredBuffer<float4> gVelocityIN;
StructuredBuffer<float4> gScaleIN;
StructuredBuffer<float4> gColorIN;

RWStructuredBuffer<float4> gPositionOUT;
RWStructuredBuffer<float4> gVelocityOUT;
RWStructuredBuffer<float4> gScaleOUT;
RWStructuredBuffer<float4> gColorOUT;

uniform int gParticleCount = 0;

uniform float gDeltaTime = 0.f;

[numthreads(64,1,1)]
void UPDATE(uint3 id : SV_DispatchThreadID)
{
    int tID = (int)id.x;

    if (tID >= gParticleCount) return;

    Constants constants = gConstantsBuffer[0];
    float3 pPosition = gPositionIN[tID].xyz;
    float3 pVelocity = gVelocityIN[tID].xyz;
    float2 pScale = gScaleIN[tID].xy;
    float3 pColor = gColorIN[tID].xyz;

    // Update position.
    pPosition = pPosition + pVelocity * gDeltaTime;

    // Update velocity (acceleration).
    pVelocity = pVelocity + constants.force * gDeltaTime;

    // Update velocity (retardation).
    pVelocity = pVelocity - pVelocity * (constants.drag * gDeltaTime);

    // Update lifetime.
    //self_positionXYZ_lifetime.w = self_positionXYZ_lifetime.w - gDeltaTime;

    gPositionOUT[tID] = float4(pPosition, 0);
    gVelocityOUT[tID] = float4(pVelocity, 0);
    gScaleOUT[tID] = float4(pScale, 0, 0);
    gColorOUT[tID] = float4(pColor, 0);
}

// Emitt kernel
#pragma kernel EMITT

struct EmittInfo
{
    int emittIndex;
    float3 position;
    float3 velocity;
    float2 scale;
    float3 color;
    float lifetime;
};

uniform StructuredBuffer<EmittInfo> gEmittInfoBuffer;

RWStructuredBuffer<float4> gPosition;
RWStructuredBuffer<float4> gVelocity;
RWStructuredBuffer<float4> gScale;
RWStructuredBuffer<float4> gColor;

[numthreads(1, 1, 1)]
void EMITT(uint3 id : SV_DispatchThreadID)
{
    EmittInfo emittInfo = gEmittInfoBuffer[0];

    float3 pPostion = emittInfo.position;
    float3 pVelocity = emittInfo.velocity;
    float2 pScale = emittInfo.scale;
    float3 pColor = emittInfo.color;

    gPosition[emittInfo.emittIndex] = float4(pPostion, 0);
    gVelocity[emittInfo.emittIndex] = float4(pVelocity, 0);
    gScale[emittInfo.emittIndex] = float4(pScale, 0, 0);
    gColor[emittInfo.emittIndex] = float4(pColor, 0);
}

ENDCG