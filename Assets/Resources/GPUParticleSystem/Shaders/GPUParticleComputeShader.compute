CGPROGRAM

// Update kernel
#pragma kernel UPDATE

StructuredBuffer<float4> gPositionIN;
StructuredBuffer<float4> gVelocityIN;
StructuredBuffer<float4> gScaleIN;
StructuredBuffer<float4> gColorIN;
StructuredBuffer<float4> gLifetimeIN;

RWStructuredBuffer<float4> gPositionOUT;
RWStructuredBuffer<float4> gVelocityOUT;
RWStructuredBuffer<float4> gScaleOUT;
RWStructuredBuffer<float4> gColorOUT;
RWStructuredBuffer<float4> gLifetimeOUT;

uniform int gMaxParticleCount;
uniform float gDeltaTime;

uniform float3 gForce;
uniform float gDrag;

[numthreads(64,1,1)]
void UPDATE(uint3 id : SV_DispatchThreadID)
{
    int tID = (int)id.x;

    if (tID >= gMaxParticleCount) return;

    float pLifetime = gLifetimeIN[tID].x;

    if (pLifetime < 0.0f) return;

    float3 pPosition = gPositionIN[tID].xyz;
    float3 pVelocity = gVelocityIN[tID].xyz;
    float2 pScale = gScaleIN[tID].xy;
    float3 pColor = gColorIN[tID].xyz;

    // Update position.
    pPosition = pPosition + pVelocity * gDeltaTime;

    // Update velocity (acceleration).
    pVelocity = pVelocity + gForce * gDeltaTime;

    // Update velocity (retardation).
    pVelocity = pVelocity - pVelocity * (gDrag * gDeltaTime);

    // Update lifetime.
    pLifetime = pLifetime - gDeltaTime;

    gPositionOUT[tID] = float4(pPosition, 0);
    gVelocityOUT[tID] = float4(pVelocity, 0);
    gScaleOUT[tID] = float4(pScale, 0, 0);
    gColorOUT[tID] = float4(pColor, 0);
    gLifetimeOUT[tID] = float4(pLifetime, 0, 0, 0);
}

// Emitt kernel
#pragma kernel EMITT

RWStructuredBuffer<float4> gPositionBuffer;
RWStructuredBuffer<float4> gVelocityBuffer;
RWStructuredBuffer<float4> gScaleBuffer;
RWStructuredBuffer<float4> gColorBuffer;
RWStructuredBuffer<float4> gLifetimeBuffer;

uniform int gEmittIndex;
uniform float3 gPosition;
uniform float3 gVelocity;
uniform float2 gScale;
uniform float3 gColor;
uniform float gLifetime;

uniform StructuredBuffer<float3> gEmittMeshVertexBuffer;
uniform StructuredBuffer<int> gEmittMeshIndexBuffer;
uniform int gEmittMeshVertexCount;
uniform int gEmittMeshIndexCount;
uniform int gEmittMeshRandomIndex;

[numthreads(1, 1, 1)]
void EMITT(uint3 id : SV_DispatchThreadID)
{
    int index = gEmittIndex;

    float3 emittPosition = gPosition;
    if (gEmittMeshIndexCount > 0)
        emittPosition += gEmittMeshVertexBuffer[gEmittMeshIndexBuffer[gEmittMeshRandomIndex]];

    gPositionBuffer[index] = float4(emittPosition, 0);
    gVelocityBuffer[index] = float4(gVelocity, 0);
    gScaleBuffer[index] = float4(gScale, 0, 0);
    gColorBuffer[index] = float4(gColor, 0);
    gLifetimeBuffer[index] = float4(gLifetime, 0, 0, 0);
}

ENDCG