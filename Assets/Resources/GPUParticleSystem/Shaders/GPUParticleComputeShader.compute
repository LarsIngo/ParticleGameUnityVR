CGPROGRAM

// TODO: Fix comment: Update kernel
#pragma kernel UPDATE


StructuredBuffer<float4> gPositionIN;
StructuredBuffer<float4> gVelocityIN;
StructuredBuffer<float4> gAmbientIN;
StructuredBuffer<float4> gLifetimeIN;

RWStructuredBuffer<float4> gPositionOUT;
RWStructuredBuffer<float4> gVelocityOUT;
RWStructuredBuffer<float4> gAmbientOUT;
RWStructuredBuffer<float4> gLifetimeOUT;

uniform int gMaxParticleCount;
uniform float gDeltaTime;

uniform float3 gConstantAcceleration;
uniform float gConstantDrag;

struct Attractor
{

    float3 mPosition;
    float mPower;
    float mMin;
    float mMax;
    float2 padding;

};

uniform int gAttractorCount;
StructuredBuffer<Attractor> gAttractorBuffer;


struct VectorField
{

    float3 mPosition;
    float3 mVector;
    float mMin;
    float mMax;

};
uniform int gVectorFieldCount;
StructuredBuffer<VectorField> gVectorFieldBuffer;

uniform int gSphereColliderCount;
StructuredBuffer<float4> gSphereColliderBuffer;

RWStructuredBuffer<int> gSphereColliderResultBufferWRITE;

[numthreads(64,1,1)]
void UPDATE(uint3 id : SV_DispatchThreadID)
{
    int tID = (int)id.x;

    if (tID >= gMaxParticleCount) return;

    float3 pPosition = gPositionIN[tID].xyz;
    float3 pVelocity = gVelocityIN[tID].xyz;
    float3 pAmbient = gAmbientIN[tID].xyz;
    float2 pLifetime = gLifetimeIN[tID].xy;

    if (pLifetime.x > -0.3f)
    {
        float dt = gDeltaTime;

        // Update position.
        pPosition = pPosition + pVelocity * dt;

        // Update velocity (acceleration).
        pVelocity = pVelocity + gConstantAcceleration * dt;

        // Update velocity (drag).
        pVelocity = pVelocity - pVelocity * (gConstantDrag * dt);

        // Update velocity (attractors).
        int attractorCount = gAttractorCount;
        for (int i = 0; i < attractorCount; ++i)
        {
            Attractor attractor = gAttractorBuffer[i];
            float3 aPosition = attractor.mPosition;
            float aPower = attractor.mPower;
            float aMin = attractor.mMin;
            float aMax = attractor.mMax;

            float3 attractorDirection = aPosition - pPosition;
            float distance = length(attractorDirection);

            if (distance > aMin && distance < aMax)
            {
                attractorDirection = normalize(attractorDirection);
                float distanceFactor = clamp(1.f / (distance * distance), 0, 1.f);
                float attraction = aPower * distanceFactor;
                pVelocity = pVelocity + attractorDirection * (attraction * dt);
            }
        }

        // Update velocity (vector fields).
        int vectorFieldCount = gVectorFieldCount;
        for (int i = 0; i < vectorFieldCount; ++i)
        {
            VectorField vectorField = gVectorFieldBuffer[i];
            float3 vPosition = vectorField.mPosition;
            float3 vVector = vectorField.mVector;
            float vMin = vectorField.mMin;
            float vMax = vectorField.mMax;

            float3 vectorFieldDirection = vPosition - pPosition;
            float distance = length(vectorFieldDirection);

            if(distance > vMin && distance < vMax)
            {
                pVelocity = pVelocity + vVector * dt;
            }

        }

        // Update collider (sphere).
        int sphereColliderCount = gSphereColliderCount;
        if (sphereColliderCount > 0)
        {

            if (tID < sphereColliderCount)
            {
                gSphereColliderResultBufferWRITE[tID] = 0;
            }

            //TODO BARRIER!!

            for (int i = 0; i < sphereColliderCount; ++i)
            {
                float4 sphereCollider = gSphereColliderBuffer[i];
                float3 cPosition = sphereCollider.xyz;
                float cRadius = sphereCollider.w;

                float3 cDirection = cPosition - pPosition;
                float cDistance = length(cDirection);

                if (cDistance < cRadius)
                {
                    // Register collision.
                    InterlockedAdd(gSphereColliderResultBufferWRITE[i], 1);

                    // Bounce vector with collider.
                    float3 oldPosition = pPosition - pVelocity * dt;
                    float3 normal = normalize(oldPosition - cPosition);

                    float3 newVelocity = reflect(pVelocity, normal);
                    float3 newPosition = oldPosition + newVelocity * dt;

                    pPosition = newPosition;
                    pVelocity = newVelocity;
                }
            }
        }

        // Update lifetime.
        pLifetime.x = pLifetime.x - dt;
    }

    gPositionOUT[tID] = float4(pPosition, 0);
    gVelocityOUT[tID] = float4(pVelocity, 0);
    gAmbientOUT[tID] = float4(pAmbient, 0);
    gLifetimeOUT[tID] = float4(pLifetime.xy, 0, 0);
}

// Emitt kernel
#pragma kernel EMITT

RWStructuredBuffer<float4> gPositionBuffer;
RWStructuredBuffer<float4> gVelocityBuffer;
RWStructuredBuffer<float4> gAmbientBuffer;
RWStructuredBuffer<float4> gLifetimeBuffer;

uniform int gEmittIndex;
uniform float3 gPosition;
uniform float3 gVelocity;
uniform float3 gAmbient;
uniform float gLifetime;

uniform StructuredBuffer<float3> gEmittMeshVertexBuffer;
uniform StructuredBuffer<int> gEmittMeshIndexBuffer;
uniform int gEmittMeshVertexCount;
uniform int gEmittMeshIndexCount;
uniform int gEmittMeshRandomIndex;
uniform float3 gEmittMeshScale;

[numthreads(1, 1, 1)]
void EMITT(uint3 id : SV_DispatchThreadID)
{
    int index = gEmittIndex;

    float3 emittPosition = gPosition;
    if (gEmittMeshIndexCount > 0)
        emittPosition += gEmittMeshVertexBuffer[gEmittMeshIndexBuffer[gEmittMeshRandomIndex]] * gEmittMeshScale;

    gPositionBuffer[index] = float4(emittPosition, 0);
    gVelocityBuffer[index] = float4(gVelocity, 0);
    gAmbientBuffer[index] = float4(gAmbient, 0);

    float lifetime = gLifetime;
    gLifetimeBuffer[index] = float4(lifetime, lifetime, 0, 0);
}


// Update kernel
#pragma kernel RESULT

StructuredBuffer<int> gGPUColliderResultBufferIN;
RWStructuredBuffer<int> gGPUColliderResultBufferOUT;

StructuredBuffer<int> gSphereColliderResultBufferREAD;

uniform int gGPUColliderCount;
uniform bool gInitZero;

[numthreads(64, 1, 1)]
void RESULT(uint3 id : SV_DispatchThreadID)
{
    int tID = (int)id.x;

    int gpuColliderCount = gGPUColliderCount;

    if (tID >= gpuColliderCount) return;

    int value = gSphereColliderResultBufferREAD[tID];
    
    if (gInitZero)
    {
        gGPUColliderResultBufferOUT[tID] = value;
    }
    else
    {
        gGPUColliderResultBufferOUT[tID] = gGPUColliderResultBufferIN[tID] + value;
    }
}

ENDCG
