CGPROGRAM

// Update kernel
#pragma kernel UPDATE

struct Constants
{
    float drag;
    float3 force;
};

uniform StructuredBuffer<Constants> gConstantsBuffer;

struct Particle
{
    float3 position;
    float3 velocity;
    float2 scale;
    float3 color;
    //float tmp;
};

uniform StructuredBuffer<Particle> gParticleBufferIN;

uniform RWStructuredBuffer<Particle> gParticleBufferOUT;

uniform int gParticleCount = 0;

uniform float gDeltaTime = 0.f;

[numthreads(64,1,1)]
void UPDATE(uint3 id : SV_DispatchThreadID)
{
    int tID = (int)id.x;

    if (tID >= gParticleCount) return;

    Particle pSelf = gParticleBufferIN[tID];
    Constants constants = gConstantsBuffer[0];

    pSelf.position = pSelf.position + pSelf.velocity * gDeltaTime;

    pSelf.velocity = pSelf.velocity + constants.force * gDeltaTime;

    pSelf.velocity = pSelf.velocity - pSelf.velocity * (constants.drag * gDeltaTime);

    //pSelf.lifetime = pSelf.lifetime - gDeltaTime;

    gParticleBufferOUT[tID] = pSelf;
}

// Emitt kernel
#pragma kernel EMITT

struct EmittInfo
{
    int emittIndex;
    float3 position;
    float3 velocity;
    float2 scale;
    float3 color;
    float lifetime;
};

uniform StructuredBuffer<EmittInfo> gEmittInfoBuffer;

uniform RWStructuredBuffer<Particle> gEmittParticleBuffer;

//uniform int gEmittIndex = 0;
//uniform float3 gEmittPostion = float3(0, 0, 0);
//uniform float3 gEmittVelocity = float3(0, 0, 0);

[numthreads(1, 1, 1)]
void EMITT(uint3 id : SV_DispatchThreadID)
{
    EmittInfo emittInfo = gEmittInfoBuffer[0];
    Particle particle;

    particle.position = emittInfo.position;
    particle.velocity = emittInfo.velocity;
    particle.scale = emittInfo.scale;
    particle.color = emittInfo.color;
    //particle.tmp = 10.0f;

    gEmittParticleBuffer[emittInfo.emittIndex] = particle;
}

ENDCG