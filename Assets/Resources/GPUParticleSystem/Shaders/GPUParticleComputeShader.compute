// Update kernel
#pragma kernel UPDATE

struct Particle
{
    float3 position;
	float3 velocity;
    float2 scale;
	float3 color;
};

uniform RWStructuredBuffer<Particle> gParticleBufferIN;

uniform RWStructuredBuffer<Particle> gParticleBufferOUT;

uniform int gParticleCount = 0;

uniform float gDeltaTime = 0.f;

[numthreads(64,1,1)]
void UPDATE(uint3 id : SV_DispatchThreadID)
{
    uint tID = id.x;

    if (tID >= gParticleCount) return;

    Particle pSelf = gParticleBufferIN[tID];

	pSelf.position = pSelf.position + pSelf.velocity * gDeltaTime;

    gParticleBufferOUT[tID] = pSelf;
}

// Emitt kernel
#pragma kernel EMITT

uniform int gEmittIndex = 0;

[numthreads(1, 1, 1)]
void EMITT(uint3 id : SV_DispatchThreadID)
{
	Particle particle;
	particle.position = float3(-3, 0, 5);
	particle.velocity = float3(0, 1, 0);
	particle.scale = float2(1, 1);
	particle.color = float3(1, 0, 0);

	gParticleBufferIN[gEmittIndex] = particle;
}

